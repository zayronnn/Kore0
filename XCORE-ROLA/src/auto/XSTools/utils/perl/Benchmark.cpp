/*
 * This file was generated automatically by ExtUtils::ParseXS version 3.30 from the
 * contents of Benchmark.xs. Do not edit this file, edit Benchmark.xs instead.
 *
 *    ANY CHANGES MADE HERE WILL BE LOST!
 *
 */

#line 1 "src\\\\auto\\\\XSTools\\\\utils\\\\perl\\\\Benchmark.xs"
#include "../dense_hash_map.h"
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <vector>
#include <list>


typedef double (*HR_Time_t) ();
static void *HR_Time_p = 0;
#define HR_Time ((HR_Time_t) HR_Time_p)

using namespace std;
using namespace google;

struct Item {
	clock_t clock;
	double realTime;

	Item() {
		clock = 0;
		realTime = 0;
	}
};

struct eqstr {
	bool operator()(const char* s1, const char* s2) const {
		return (s1 == s2) || (s1 && s2 && strcmp(s1, s2) == 0);
	}
};
typedef dense_hash_map<const char *, int, HASH_NAMESPACE::hash<const char *>, eqstr> StrIntMap;

class Benchmark {
private:
	StrIntMap domainToId;
	vector<Item *> measurements;
	vector<Item *> results;
	list<char *> domains;
public:
	Benchmark() {
		domainToId.set_empty_key(NULL);
	}

	~Benchmark() {
		vector<Item *>::iterator it;
		list<char *>::iterator it2;
		for (it = measurements.begin(); it != measurements.end(); it++) {
			delete *it;
		}
		for (it = results.begin(); it != results.end(); it++) {
			delete *it;
		}
		for (it2 = domains.begin(); it2 != domains.end(); it2++) {
			delete *it2;
		}
	}

	void begin(const char *domain) {
		Item *item;
		StrIntMap::iterator result = domainToId.find(domain);
		if (result == domainToId.end()) {
			char *domainCopy = strdup(domain);
			domains.push_front(domainCopy);
			domainToId[domainCopy] = measurements.size();
			item = new Item();
			measurements.push_back(item);
			results.push_back(new Item());
		} else {
			pair<const char *, int> p = *result;
			item = measurements[p.second];
		}

		item->clock = clock();
		item->realTime = HR_Time();
	}

	void end(const char *domain) {
		int id = domainToId[domain];
		Item *measurement = measurements[id];
		Item *result = results[id];

		result->clock += clock() - measurement->clock;
		result->realTime += HR_Time() - measurement->realTime;
	}

	const list<char *> getDomains() {
		return domains;
	}

	const Item * getResult(const char *domain) {
		int id = domainToId[domain];
		return results[id];
	}
};

static Benchmark benchmark;


#line 113 "src\\auto\\XSTools\\utils\\perl\\Benchmark.c"
#ifndef PERL_UNUSED_VAR
#  define PERL_UNUSED_VAR(var) if (0) var = var
#endif

#ifndef dVAR
#  define dVAR		dNOOP
#endif


/* This stuff is not part of the API! You have been warned. */
#ifndef PERL_VERSION_DECIMAL
#  define PERL_VERSION_DECIMAL(r,v,s) (r*1000000 + v*1000 + s)
#endif
#ifndef PERL_DECIMAL_VERSION
#  define PERL_DECIMAL_VERSION \
	  PERL_VERSION_DECIMAL(PERL_REVISION,PERL_VERSION,PERL_SUBVERSION)
#endif
#ifndef PERL_VERSION_GE
#  define PERL_VERSION_GE(r,v,s) \
	  (PERL_DECIMAL_VERSION >= PERL_VERSION_DECIMAL(r,v,s))
#endif
#ifndef PERL_VERSION_LE
#  define PERL_VERSION_LE(r,v,s) \
	  (PERL_DECIMAL_VERSION <= PERL_VERSION_DECIMAL(r,v,s))
#endif

/* XS_INTERNAL is the explicit static-linkage variant of the default
 * XS macro.
 *
 * XS_EXTERNAL is the same as XS_INTERNAL except it does not include
 * "STATIC", ie. it exports XSUB symbols. You probably don't want that
 * for anything but the BOOT XSUB.
 *
 * See XSUB.h in core!
 */


/* TODO: This might be compatible further back than 5.10.0. */
#if PERL_VERSION_GE(5, 10, 0) && PERL_VERSION_LE(5, 15, 1)
#  undef XS_EXTERNAL
#  undef XS_INTERNAL
#  if defined(__CYGWIN__) && defined(USE_DYNAMIC_LOADING)
#    define XS_EXTERNAL(name) __declspec(dllexport) XSPROTO(name)
#    define XS_INTERNAL(name) STATIC XSPROTO(name)
#  endif
#  if defined(__SYMBIAN32__)
#    define XS_EXTERNAL(name) EXPORT_C XSPROTO(name)
#    define XS_INTERNAL(name) EXPORT_C STATIC XSPROTO(name)
#  endif
#  ifndef XS_EXTERNAL
#    if defined(HASATTRIBUTE_UNUSED) && !defined(__cplusplus)
#      define XS_EXTERNAL(name) void name(pTHX_ CV* cv __attribute__unused__)
#      define XS_INTERNAL(name) STATIC void name(pTHX_ CV* cv __attribute__unused__)
#    else
#      ifdef __cplusplus
#        define XS_EXTERNAL(name) extern "C" XSPROTO(name)
#        define XS_INTERNAL(name) static XSPROTO(name)
#      else
#        define XS_EXTERNAL(name) XSPROTO(name)
#        define XS_INTERNAL(name) STATIC XSPROTO(name)
#      endif
#    endif
#  endif
#endif

/* perl >= 5.10.0 && perl <= 5.15.1 */


/* The XS_EXTERNAL macro is used for functions that must not be static
 * like the boot XSUB of a module. If perl didn't have an XS_EXTERNAL
 * macro defined, the best we can do is assume XS is the same.
 * Dito for XS_INTERNAL.
 */
#ifndef XS_EXTERNAL
#  define XS_EXTERNAL(name) XS(name)
#endif
#ifndef XS_INTERNAL
#  define XS_INTERNAL(name) XS(name)
#endif

/* Now, finally, after all this mess, we want an ExtUtils::ParseXS
 * internal macro that we're free to redefine for varying linkage due
 * to the EXPORT_XSUB_SYMBOLS XS keyword. This is internal, use
 * XS_EXTERNAL(name) or XS_INTERNAL(name) in your code if you need to!
 */

#undef XS_EUPXS
#if defined(PERL_EUPXS_ALWAYS_EXPORT)
#  define XS_EUPXS(name) XS_EXTERNAL(name)
#else
   /* default to internal */
#  define XS_EUPXS(name) XS_INTERNAL(name)
#endif

#ifndef PERL_ARGS_ASSERT_CROAK_XS_USAGE
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE assert(cv); assert(params)

/* prototype to pass -Wmissing-prototypes */
STATIC void
S_croak_xs_usage(const CV *const cv, const char *const params);

STATIC void
S_croak_xs_usage(const CV *const cv, const char *const params)
{
    const GV *const gv = CvGV(cv);

    PERL_ARGS_ASSERT_CROAK_XS_USAGE;

    if (gv) {
        const char *const gvname = GvNAME(gv);
        const HV *const stash = GvSTASH(gv);
        const char *const hvname = stash ? HvNAME(stash) : NULL;

        if (hvname)
	    Perl_croak_nocontext("Usage: %s::%s(%s)", hvname, gvname, params);
        else
	    Perl_croak_nocontext("Usage: %s(%s)", gvname, params);
    } else {
        /* Pants. I don't think that it should be possible to get here. */
	Perl_croak_nocontext("Usage: CODE(0x%"UVxf")(%s)", PTR2UV(cv), params);
    }
}
#undef  PERL_ARGS_ASSERT_CROAK_XS_USAGE

#define croak_xs_usage        S_croak_xs_usage

#endif

/* NOTE: the prototype of newXSproto() is different in versions of perls,
 * so we define a portable version of newXSproto()
 */
#ifdef newXS_flags
#define newXSproto_portable(name, c_impl, file, proto) newXS_flags(name, c_impl, file, proto, 0)
#else
#define newXSproto_portable(name, c_impl, file, proto) (PL_Sv=(SV*)newXS(name, c_impl, file), sv_setpv(PL_Sv, proto), (CV*)PL_Sv)
#endif /* !defined(newXS_flags) */

#if PERL_VERSION_LE(5, 21, 5)
#  define newXS_deffile(a,b) Perl_newXS(aTHX_ a,b,file)
#else
#  define newXS_deffile(a,b) Perl_newXS_deffile(aTHX_ a,b)
#endif

#line 257 "src\\auto\\XSTools\\utils\\perl\\Benchmark.c"

XS_EUPXS(XS_Benchmark_init); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Benchmark_init)
{
    dVAR; dXSARGS;
    if (items != 0)
       croak_xs_usage(cv,  "");
    {
#line 109 "src\\\\auto\\\\XSTools\\\\utils\\\\perl\\\\Benchmark.xs"
	SV **svp = hv_fetch(PL_modglobal, "Time::NVtime", 12, 0);
	if (!svp) {
		croak("Time::HiRes is required");
	}
	if (!SvIOK(*svp)) {
		croak("Time::NVtime isn't a function pointer");
	}
	HR_Time_p = INT2PTR(void *, SvIV (*svp));
#line 275 "src\\auto\\XSTools\\utils\\perl\\Benchmark.c"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_Benchmark_begin); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Benchmark_begin)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "domain");
    {
	char *	domain = (char *)SvPV_nolen(ST(0))
;
#line 122 "src\\\\auto\\\\XSTools\\\\utils\\\\perl\\\\Benchmark.xs"
	benchmark.begin(domain);
#line 292 "src\\auto\\XSTools\\utils\\perl\\Benchmark.c"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_Benchmark_end); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Benchmark_end)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "domain");
    {
	char *	domain = (char *)SvPV_nolen(ST(0))
;
#line 128 "src\\\\auto\\\\XSTools\\\\utils\\\\perl\\\\Benchmark.xs"
	benchmark.end(domain);
#line 309 "src\\auto\\XSTools\\utils\\perl\\Benchmark.c"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_Benchmark_getResults); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Benchmark_getResults)
{
    dVAR; dXSARGS;
    if (items != 0)
       croak_xs_usage(cv,  "");
    {
	SV *	RETVAL;
#line 133 "src\\\\auto\\\\XSTools\\\\utils\\\\perl\\\\Benchmark.xs"
	list<char *>::iterator it;
	list<char *> domains;
	HV *results;

	domains = benchmark.getDomains();
	results = (HV *) sv_2mortal((SV *) newHV());
	for (it = domains.begin(); it != domains.end(); it++) {
		const Item *item = benchmark.getResult(*it);
		HV *perl_item = (HV *) sv_2mortal((SV *) newHV());

		hv_store(perl_item, "clock", 5, newSViv(item->clock), 0);
		hv_store(perl_item, "realTime", 8, newSVnv(item->realTime), 0);
		hv_store(results, *it, strlen(*it), newRV((SV *) perl_item), 0);
	}
	RETVAL = newRV((SV *) results);
#line 339 "src\\auto\\XSTools\\utils\\perl\\Benchmark.c"
	RETVAL = sv_2mortal(RETVAL);
	ST(0) = RETVAL;
    }
    XSRETURN(1);
}


XS_EUPXS(XS_Benchmark_clock2msec); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_Benchmark_clock2msec)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "clocktime");
    {
	double	clocktime = (double)SvNV(ST(0))
;
	double	RETVAL;
	dXSTARG;
#line 155 "src\\\\auto\\\\XSTools\\\\utils\\\\perl\\\\Benchmark.xs"
	RETVAL = clocktime / (double) CLOCKS_PER_SEC;
#line 360 "src\\auto\\XSTools\\utils\\perl\\Benchmark.c"
	XSprePUSH; PUSHn((double)RETVAL);
    }
    XSRETURN(1);
}

#ifdef __cplusplus
extern "C"
#endif
XS_EXTERNAL(boot_Utils__Benchmark); /* prototype to pass -Wmissing-prototypes */
XS_EXTERNAL(boot_Utils__Benchmark)
{
#if PERL_VERSION_LE(5, 21, 5)
    dVAR; dXSARGS;
#else
    dVAR; dXSBOOTARGSXSAPIVERCHK;
#endif
#if (PERL_REVISION == 5 && PERL_VERSION < 9)
    char* file = __FILE__;
#else
    const char* file = __FILE__;
#endif

    PERL_UNUSED_VAR(file);

    PERL_UNUSED_VAR(cv); /* -W */
    PERL_UNUSED_VAR(items); /* -W */
#if PERL_VERSION_LE(5, 21, 5)
    XS_VERSION_BOOTCHECK;
#  ifdef XS_APIVERSION_BOOTCHECK
    XS_APIVERSION_BOOTCHECK;
#  endif
#endif

        (void)newXSproto_portable("Benchmark::init", XS_Benchmark_init, file, "");
        (void)newXSproto_portable("Benchmark::begin", XS_Benchmark_begin, file, "$");
        (void)newXSproto_portable("Benchmark::end", XS_Benchmark_end, file, "$");
        (void)newXSproto_portable("Benchmark::getResults", XS_Benchmark_getResults, file, "");
        (void)newXSproto_portable("Benchmark::clock2msec", XS_Benchmark_clock2msec, file, "$");
#if PERL_VERSION_LE(5, 21, 5)
#  if PERL_VERSION_GE(5, 9, 0)
    if (PL_unitcheckav)
        call_list(PL_scopestack_ix, PL_unitcheckav);
#  endif
    XSRETURN_YES;
#else
    Perl_xs_boot_epilog(aTHX_ ax);
#endif
}

